// -*- mode: java -*-

import java.io.*;
import java.util.*;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;

public class InfJava
{

    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);

        try {
	    while(scanner.hasNextLine()) {
                System.out.print(inputHandler(scanner.nextLine()));
            }
        } catch( IOException e ) {
            System.out.println();
        }
    }

    private static String inputHandler(String in) throws IOException
    {
	String[] splits = in.split("\t");
	if( splits[0].equals("PARSE-FILE") ) {
	    if( splits.length == 3 )
		return parseFile(winStreamFromFile(splits[1]), splits[2]);
	    else
		return jsonErrorString("Incorrect number of params for PARSE-FILE.");
	} else {
	    return jsonErrorString("Unknown command.");
	}
    }
    
    private static ANTLRInputStream streamFromFile(String filename) throws IOException
    {
        return new ANTLRFileStream(filename);
    }

    private static ANTLRInputStream winStreamFromFile(String filename) throws IOException
    {
	return new WindowsFileInputStream(filename);
    }

    private static String jsonStringEscape(String in)
    {
	return in.replaceAll("\"", "\\\\\"");
    }

    private static String jsonErrorString(String msg)
    {
	return "{\"error\":\"" + jsonStringEscape(msg) + "\"}\n";
    }
    
    private static String parseFile(ANTLRInputStream instream, String name) throws IOException
    {
        StringBuilder out;
        switch(name.toLowerCase()) { <% grammars.each do |(name, start_rule)| %>
        case "<%= name.downcase %>":
	    <%= name %>Lexer <%= name.downcase %>lexer = new <%= name %>Lexer( instream );
            <%= name %>Parser <%= name.downcase %>parser = new <%= name %>Parser( new CommonTokenStream(<%= name.downcase %>lexer) );
            ParserRuleContext <%= name.downcase %>tree = <%= name.downcase %>parser.<%= start_rule %>();
	    ParseTreeWalker <%= name.downcase %>walker = new ParseTreeWalker();

	    out = new StringBuilder();
            out.append("[");

	    <%= name %>BaseListener <%= name.downcase %>listener = (new <%= name %>BaseListener()
                {
                    boolean first = true;
                    public void enterEveryRule(ParserRuleContext ctx) {
	    		if( ctx.getChildCount() == 1 &&
	    		    !(ctx.getChild(0) instanceof TerminalNodeImpl) ) {
	    		    ParserRuleContext child = (ParserRuleContext) ctx.getChild(0);
	    		    if( ctx.getStart().getStartIndex() == child.getStart().getStartIndex() &&
	    			ctx.getStop().getStopIndex() == child.getStop().getStopIndex() )
	    			return;
	    		}
			
                        if( first )
                            first = false;
                        else
                            out.append(",");

			// add 1 to start, emacs starts at 1
			int start = ctx.getStart().getStartIndex() + 1;
			// add an extra to stop, emacs wants exclusive
			int stop = ctx.getStop().getStopIndex() + 2;
			
			out.append("[\"");
			out.append(jsonStringEscape(<%= name %>Parser.ruleNames[ctx.getRuleIndex()]));
			out.append("\",");
			out.append(start);
			out.append(",");
			out.append(stop);
			out.append("]");
                    }
                });

	    <%= name.downcase %>walker.walk(<%= name.downcase %>listener, <%= name.downcase %>tree);
	    
            out.append("]\n");
            return out.toString();
	    <% end %>
        default:
            return jsonErrorString("Unknown grammar " + name);
        }
    }
    
}
