
* About
This is a basis for building Emacs modes that utilize parse
information in order to better edit and navigate code.

* Documentation
** Terminology
<<<point>>> A point is a single integer value corresponding to a
position in a buffer. Points in buffers begin at one.

<<<span>>> A label, a start, and end point of a syntactic region. End points are
exclusive. A span may also contain extra information.

<<<node>>> A parent span and a list of children spans. The parent span
should encapsulate all children spans. The children spans should be
ordered.

<<<parse tree>>> A tree structure created as nodes from span
information. Starts as either a node or list of nodes. `nil' is
considered an empty parse tree.

<<<term>>> A term is a span, node, or list of nodes. Parse trees are
by definition a subset, but think of terms as the contents of parse
trees. Points are not terms.

** Quickstart Derived Mode
*** Loading the Library
Add the following code to your `~/.emacs' file to automatically load
the se-mode files.
#+BEGIN_SRC
(let ((se-path "<PATH-TO-SE>"))
  (add-to-list 'load-path se-path)
  (add-to-list 'load-path (concat se-path "/json.el")))
(load-library "se")
#+END_SRC
*** Methods of Interest
When viewed in Emacs, using `C-h f' on each line will bring up
documentation.
- define-minor-mode
- define-key
- start-process
- se-inf-start
- se-inf-stop
*** Template Minor Mode
#+BEGIN_SRC emacs-lisp
(define-minor-mode my-se-mode
  "Documentation."
  :init-value nil
  :lighter " my-se"
  :keymap (make-keymap)
  (when my-se-mode
    (se-inf-start
      (start-process "my-se-mode" "*my-se-mode*"
        "java" "-cp" ".;/opt/myparser" "MyParser")))
  (unless my-se-mode
    (se-inf-stop)))
(define-key my-se-mode-map (kbd "M-s") #'se-navigation-mode)
#+END_SRC
*** Expanding the Template
Se-modes can interact with inferior processes to get span
information. A set of helper commands are inside `se-inf.el'. However,
crawling through source is unnecessary, sane defaults have already
been set. Just call `se-inf-start' with the process object returned
from `start-process'. This can be seen in the template above.

The template defined above uses the already defined keymap for
`se-mode'. To be useful you need to set `se-mode-parse-tree' to a
parse tree. This can be done automatically from using se-inf. Just use
the hotkey `c' from within `se-navigation-mode'.

*** Se-inf Expected Protocol
- All responses are valid JSON
- Each response is one line terminated by a newline character
- Each request is one line terminated by a newline character
- The default parse request is just the file name

**** Default Response
The expect response from the default parse request is a [[http://json.org/][JSON]]
object. JSON was chosen because of the wide support, yet simplicity to
build procedurally. Certain name/value pairs have predefined
behavior. `spans' should contain an array of spans as arrays. A span
has the pattern [label, start, end, extra]. The fourth element is
optional but expected to be valid JSON. `error' should contain any
error message you want displayed to the user. The following are two
examples:

#+BEGIN_SRC json
{
  "spans":[["span1",1,100],
           ["span2",1,30,{"type":"method"}]]
}
#+END_SRC

#+BEGIN_SRC json
{
  "error":"Unable to open file."
}
#+END_SRC
